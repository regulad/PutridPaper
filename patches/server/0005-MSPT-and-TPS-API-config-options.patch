From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Parker Wahle <parkeredwardwahle2017@gmail.com>
Date: Thu, 6 Jan 2022 18:15:32 -0500
Subject: [PATCH] MSPT and TPS API & config options


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 2437e334dabb250c73b7a2ae328aa2d790e8a4c0..b689c917a64335a03a7e0480fa02e1afbec1ad26 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -193,7 +193,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final String VANILLA_BRAND = "vanilla";
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
-    public static final int MS_PER_TICK = 50;
+    public static int MS_PER_TICK = 50; // PutridPaper
     private static final int OVERLOADED_THRESHOLD = 2000;
     private static final int OVERLOADED_WARNING_INTERVAL = 15000;
     public static final String LEVEL_STORAGE_PROTOCOL = "level";
@@ -300,8 +300,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public boolean forceTicks; // Paper
     // CraftBukkit end
     // Spigot start
-    public static final int TPS = 20;
-    public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
+    public static int TPS = 20; // PutridPaper
+    public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;  // PutridPaper
     private static final int SAMPLE_INTERVAL = 20; // Paper
     public final double[] recentTps = new double[ 3 ];
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
@@ -1226,11 +1226,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime; // Paper
 
                     if (i > 5000L && this.nextTickTime - this.lastOverloadWarning >= 30000L) { // CraftBukkit
-                        long j = i / 50L;
+                        long j = i / MS_PER_TICK; // PutridPaper
 
                         if (this.server.getWarnOnOverload()) // CraftBukkit
                             MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
-                        this.nextTickTime += j * 50L;
+                        this.nextTickTime += j * MS_PER_TICK; // PutridPaper
                         this.lastOverloadWarning = this.nextTickTime;
                     }
 
@@ -1258,13 +1258,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
                     //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
                     lastTick = curTime;
-                    this.nextTickTime += 50L;
+                    this.nextTickTime += MS_PER_TICK; // PutridPaper
                     this.startMetricsRecordingTick();
                     this.profiler.push("tick");
                     this.tickServer(this::haveTime);
                     this.profiler.popPush("nextTickWait");
                     this.mayHaveDelayedTasks = true;
-                    this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
+                    this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + MS_PER_TICK, this.nextTickTime); // PutridPaper
                     this.waitUntilNextTick();
                     this.profiler.pop();
                     this.endMetricsRecordingTick();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 36ce1f5563f0340cf63346722b833f8769419017..0097a3ee60f80b3d3677eaf26afaf0bc29865fca 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1750,6 +1750,37 @@ public final class CraftServer implements Server {
     public void shutdown() {
         this.console.halt(false);
     }
+    // PutridPaper Start
+    @Override
+    public int getTargetTPS() {
+        return MinecraftServer.TPS;
+    }
+
+    @Override
+    public boolean setTargetTPS(int targetTPS) {
+        final @org.jetbrains.annotations.NotNull xyz.regulad.putridpaper.event.TPSChangeEvent event = new xyz.regulad.putridpaper.event.TPSChangeEvent(MinecraftServer.TPS, targetTPS);
+        this.getPluginManager().callEvent(event);
+        if (!event.isCancelled()) {
+            MinecraftServer.TPS = targetTPS;
+        }
+        return !event.isCancelled();
+    }
+
+    @Override
+    public int getTargetMSPT() {
+        return MinecraftServer.MS_PER_TICK;
+    }
+
+    @Override
+    public boolean setTargetMSPT(int targetMSPT) {
+        final @org.jetbrains.annotations.NotNull xyz.regulad.putridpaper.event.MSPTChangeEvent event = new xyz.regulad.putridpaper.event.MSPTChangeEvent(MinecraftServer.MS_PER_TICK, targetMSPT);
+        this.getPluginManager().callEvent(event);
+        if (!event.isCancelled()) {
+            MinecraftServer.MS_PER_TICK = targetMSPT;
+        }
+        return !event.isCancelled();
+    }
+    // PutridPaper End
 
     @Override
     @Deprecated // Paper
diff --git a/src/main/java/xyz/regulad/putridpaper/PutridConfig.java b/src/main/java/xyz/regulad/putridpaper/PutridConfig.java
index b7345c6a62d70ee476a3decafca505c3658cf891..9feafb5b8b1111681e0e5c7a359c70d594fda461 100644
--- a/src/main/java/xyz/regulad/putridpaper/PutridConfig.java
+++ b/src/main/java/xyz/regulad/putridpaper/PutridConfig.java
@@ -9,6 +9,8 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import xyz.regulad.putridpaper.command.PutridCommand;
+import xyz.regulad.putridpaper.command.SetTPSCommand;
 
 import java.io.File;
 import java.io.IOException;
@@ -48,7 +50,8 @@ public class PutridConfig {
         verbose = getBoolean("verbose", false);
 
         commands = new HashMap<>();
-        // Commands here
+        commands.put("putrid", new PutridCommand("putrid"));
+        commands.put("settps", new SetTPSCommand("settps"));
 
         version = getInt("config-version", 1);
         set("config-version", 1);
@@ -145,5 +148,14 @@ public class PutridConfig {
         }
         return builder.build();
     }
+
+    public static int startingTPS = 20;
+    public static int startingMSPT = 50;
+    private static void TPSConfig() {
+        startingTPS = getInt("settings.tps", startingTPS);
+        MinecraftServer.TPS = startingTPS;
+        startingMSPT = getInt("settings.mspt", startingMSPT);
+        MinecraftServer.MS_PER_TICK = startingMSPT;
+    }
 }
 
diff --git a/src/main/java/xyz/regulad/putridpaper/command/PutridCommand.java b/src/main/java/xyz/regulad/putridpaper/command/PutridCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4fb2b6c3d28b027bc982905f72f7bb9d3ff4cea
--- /dev/null
+++ b/src/main/java/xyz/regulad/putridpaper/command/PutridCommand.java
@@ -0,0 +1,64 @@
+package xyz.regulad.putridpaper.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import xyz.regulad.putridpaper.PutridConfig;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PutridCommand extends Command {
+    public PutridCommand(String name) {
+        super(name);
+        this.description = "PutridPaper related commands";
+        this.usageMessage = "/putrid [reload | version]";
+        this.setPermission("bukkit.command.putrid");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            PutridConfig.init((File) console.options.valueOf("putridpaper-settings"));
+            // reload TPS
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "PutridPaper config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
+
diff --git a/src/main/java/xyz/regulad/putridpaper/command/SetTPSCommand.java b/src/main/java/xyz/regulad/putridpaper/command/SetTPSCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..27b98f3a6a5dfdf4a59bd0fa5f13302fd28b9b6e
--- /dev/null
+++ b/src/main/java/xyz/regulad/putridpaper/command/SetTPSCommand.java
@@ -0,0 +1,49 @@
+package xyz.regulad.putridpaper.command;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextDecoration;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.util.List;
+
+public class SetTPSCommand extends Command {
+    private static final Component UPDATED = Component.text("Updated the server's TPS.", NamedTextColor.GREEN, TextDecoration.BOLD);
+    private static final Component FAILED = Component.text("Couldn't the server's TPS.", NamedTextColor.RED, TextDecoration.BOLD);
+
+    public SetTPSCommand(String name) {
+        super(name);
+        this.description = "Sets the servers TPS, as well as the MSPT.";
+        this.usageMessage = "/settps [newtps]";
+        this.setPermission("bukkit.command.putrid");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return List.of("20");
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        final int newTps = Integer.parseInt(args[0]);
+
+        if (Bukkit.getServer().setTargetTPS(newTps) && Bukkit.getServer().setTargetMSPT(1000 / newTps)) {
+            sender.sendMessage(UPDATED);
+        } else {
+            sender.sendMessage(FAILED);
+        }
+
+        return true;
+    }
+}
